<Spring>

com.zerock.controller 기본 설정
=========================================================
Spring 3 요소

스프링 컨테이너 (SpringContainer)
: 스프링컨테이너가 객체를 생성 및 소멸 한다.
: 우리가 직접 생성하지 않는다.

1. IOC : Inversoin Of Control (제어권의 역전) 
2. DI : Dependency Injection (의존성 주입)
-A가 B를 상속(extends)
            포함(매개변수 or 생성 or 변수)  => 의존주입
3. AOP : Aspect Oriented Programming (관점 지향 프로그래밍)
4. PSA : Portable Service Abstraction (일관성 있는 서비스 추상화

=========================================================
POJO(Plain Old Java Object)란?
주로 특정 자바 모델이나 기능, 프레임워크를 따르지 않는 Java Object를 지칭하며,
대표적으로 Java Bean 객체가 있음
ex) Getter / Setter


프로그램 관련 환경설정
-XML  (√ 사용할 것임.)
-java클래스 (Spring 관련 환경설정)

요청 순서
브라우저 - frontcontroller - actioncontroller - DAO - DB   ->
 DB - DAO - actioncontroller - frontcontroller - 브라우저  <-
    DTO                                             view

라이브러리 배포방식
Jsp : lib (lombok.jar)
Spring : Maven / gradle

spring framework 라이브러리 빌드방식
-Maven √
-gradle : 객체형태로 작성되는 방식

1. http://localhost:8080/controller/
2. DispatcherServlet =>web.xml
근거 - <servlet-mapping>
	<servlet-name>appServlet</servlet-name>
	<url-pattern>/</url-pattern>
        </servlet-mapping>
3. @RequestMapping(value = "/", method = RequestMethod.GET) =>HomeController.java
   public String home(Locale locale, Model model) {
	........
	........

	return "home";  //뷰의 이름: home //home.jsp
   }
4. home.jsp  =>src/webapp/WEB_INF/views

5. servlet-context.xml  =>src/webapp/WEB_INF/spring/appServlet
근거 - <beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
	<beans:property name="prefix" value="/WEB-INF/views/" />
	<beans:property name="suffix" value=".jsp" />
        </beans:bean>

=========================================================
com.zerock.sample

*servlet-context.xml
요청과 관련된 객체를 정의합니다.
url과 관련된 Controller나 어노테이션, ViewResolver(컨트롤러에서 view 정보에 대해 설정하는 것),
Interceptor, MultipartResolver등의 설정을 해줍니다.


*root-context.xml
servlet-context.xml와는 반대로 view와 관련되지 않은 객체를 정의합니다.
Service, Repository(DAO),DB등 비즈니스 로직과 관련된 설정을 해줍니다.


*web.xml
웹 어플리케이션 서버(WAS)가 최초로 구동될 때(톰캣이 최초로 구동이 될때)
각종 설정을 정의합니다. 이때 파일 내에서 여러 xml파일을 인식할 수 있도록 
설정되어있으며, 설정을 위한 설정파일 입니다.


@NonNull : null을 허용하지 않는 경우 값이 반드사 들어와야함
@Nullable : null을 허용할 경우

=========================================================
<3강>
HikariCP 2.7.3 다운 후 2.7.4로 변경


<!-- 자바 기존의 생성자 방식과 SET메소드 호출
Car c = new Car("kia")
c.setModel("BMW") 
-->
<!-- id="변수명" class="IOC해야되는 패키지명을 적어줌"-->
<!--property : bean형태의 SET메소드 호출 -->

<bean id="car" class="org.zerock.sample.Car">
	<constructor-arg ref="Audio"></constructor-arg>
	<property name="model" value="Hyundae"></property> 
</bean> 
=========================================================
<4강>
4.1.1 MyBatis
- MyBatis에서는 프로그램에 있는 SQL쿼리들을 한 구성파일에
구성하여 프로그램 코드와 SQL을 분리 할 수 있는 장점을 가지고 있다.


4.1.2 SQL SessionFactory
pom.xml에 추가

MyBatis
<!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring -->
<dependency>
<groupId>org.mybatis</groupId>
<artifactId>mybatis-spring</artifactId>
<version>1.3.2</version>
</dependency>

spring-jdbc
<!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc -->
<dependency>
<groupId>org.springframework</groupId>
<artifactId>spring-jdbc</artifactId>
<version>${org.springframework-version}</version>
</dependency>

spring-tx
<!-- https://mvnrepository.com/artifact/org.springframework/spring-tx -->
<dependency>
<groupId>org.springframework</groupId>
<artifactId>spring-tx</artifactId>
<version>${org.springframework-version}</version>
</dependency>



=========================================================

<5강>

http://localhost:8081/controller/

스프링컨테이너가 빈객체를 등록하는 방법
1. 어노테이션을 정의하는 방식
 - @Component, @Controller
2. xml파일에 <bean>을 정의하는 방식 (root-context.xml)

=========================================================

<6강> Spring MVC 의 Controller

커맨드 객체(Command Object) : HttpServletRequest 를 통해 들어온 요청 파라미터들을 
setter메서드를 이용하여 객체에 정의되어있는 속성에 바인딩이 되는 객체

1. 파라메터 자동으로 받기
2. 뷰 페이지로 커맨드객체의 정보를 전달한다(클래스의 첫 글자를 소문자로 구성해서 전달)
       sampleDTO
=========================================================
6.3 Controller의 파라미터 수집

@Controller와 @RequestMapping은 같이 써야 하고 밸류값은 uri 값이 된다.

http://localhost:8081/sample/ex01?name=hong&age=10
                                      //(SampleDTO dto)에 들어가야함.
@GetMapping("ex01")
	public String ex01(SampleDTO dto) {
		log.info("" + dto);
		
		return "ex01";
	}

http://localhost:8081/sample/ex02?name=hong&age=10

http://localhost:8081/sample/ex02List?ids=aaa&ids=bbb&ids=ccc

http://localhost:8081/sample/ex02Bean?list%5B0%5D.name=aaa&list%5D1%5D.name=bbb

http://localhost:8081/sample/ex03?title=test&dueDate=2022/12/21

http://localhost:8081/sample/ex04?name=aaa&age=11&page=9

=========================================================
6.4 Model
컨트롤러에서 뷰페이지로 데이터를 전달하는 방식

1. Model객체
 - addAttribute (속성, 값)
2. 커맨드객체
3. @ModelAttribute - 강제로 전달받은 파라미터를  Model에 담아서 전달하도록 할 때 필요한 어노테이션
 - @ModelAttribute가 걸린 파라미터는 타입에 관계없이 무조건 Model에 담아서 전달된다.
4. RedirectAttributes - 한번 사용할 데이터를 뷰페이지에 전달
 - addFlashAttr (속성, 값)
 => response.sendRedirect("list.jsp?name=hong")


http://localhost:8081/sample/ex05
=========================================================

6.5.3 객체 타입

5. @ResponseBody로 Json형식으로 값 전달
 - DTO타입으로 리턴 값을 정의하고, @ResponseBody를 정의한다.

http://localhost:8081/sample/ex06


6.5.4 ResponseEntity 타입

6. ResponseEntity로 Json형식으로 값 전달
 - HttpHeaders 객체를 같이 전달 할 수 있고, 
  이를 통해 원하는  HTTP헤더 메시지를 가공하는 것이 가능하다.

http://localhost:8081/sample/ex07

6.5.5 파일 업로드 처리

<!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload -->
<dependency>
<groupId>commons-fileupload</groupId>
<artifactId>commons-fileupload</artifactId>
<version>1.3.3</version>
</dependency>

추가 후, 파일 임시로 업로드 될 폴더를 C드라이브 - upload - tmp 생성

http://localhost:8081/sample/exUpload
 => http://localhost:8081/sample/exUploadPost 바뀜

=========================================================
ex02플젝
<7강> Spring MVC프로젝트의 기본 구성

MVC (3Tire)

presentation - xxx.jsp                                              V

Business - xxx.java => xxxController.java  아래 위 중간역할 C

Persistence - xxxService.java , xxxServiceImpliments.java      M
 
xxxDTO.java , xxxVO.java (* VO : Value Object)




<14강>

=========================================================
14.4 조회 페이지 이동

list.jsp
http://localhost:8081/board/list?pageNum=2&amount=10
상세보기
http://localhost:8081/board/get?bno=458757

페이징처리 후 특정 게시물의 조회 페이지 기능 수정 후

조회 페이지 이동
http://localhost:8081/board/get?pageNum=2&amount=10&bno=458757
=========================================================
14.5 수정과 삭제 처리 후 페이지 이동

-기존에 4페이지 건을 수정하였으나 모디파이 하면 1페이지로 감
http://localhost:8081/board/modify?bno=458736&pageNum=4&amount=10
http://localhost:8081/board/list -1페이지

-BoardController_modify() 수정 후
추가 건
@ModelAttribute("cri") Criteria cri
rttr.addAttribute("pageNum", cri.getPageNum());
rttr.addAttribute("amount", cri.getAmount());

http://localhost:8081/board/list?pageNum=7&amount=10
=========================================================
-기존에 4페이지 건을 수정하였으나 모디파이 하면 1페이지로 감
http://localhost:8081/board/remove?bno=458736&pageNum=4&amount=10
http://localhost:8081/board/list -1페이지

-BoardController_remove() 수정 후
추가 건
@ModelAttribute("cri") Criteria cri
rttr.addAttribute("pageNum", cri.getPageNum());
rttr.addAttribute("amount", cri.getAmount());

http://localhost:8081/board/list?pageNum=10&amount=10


=========================================================
14.6 My Batis에서 전체 데이터의 갯수 처리

- BoardMapper 인터페이스에 getTotalCount()메서드 정의하고
XML을 이용하여  SQL처리

추가 후, 페이지 갯수가 13개에서 몇백개로 늘어남.

=========================================================
<15강> 검색처리


http://localhost:8081/board/list?type=T&keyword=%EC%88%98%EC%A0%95&pageNum=10&amount=10



15.4 화면에서 검색조건 처리
검색조건과 키워드를 보여주는 부분 
selected 처리 
<option value="" <c:out value="${pageMaker.cri.type == null? 'selected' : ''}"/>>--</option>
(기존에는 검색 후 빈 공백 이였으나 조건 추가 후 검색 후에도 그대로 남아있음)
http://localhost:8081/board/list?type=T&keyword=tnwjd&pageNum=1&amount=10


15.4.3 수정/삭제 페이지에서 검색 처리
- 기존에 검색 후 수정/삭제 페이지에서 리스트버튼 누르면 페이지 초기화 되었으나, 
type/ keyword추가 후 수정/삭제 페이지에서 리스트를 눌러도 검색으로 추려진 페이지로 이동된다.
(고객의 시각에서 편리함)
http://localhost:8081/board/list?pageNum=1&amount=10&keyword=%EC%97%AC%EB%A6%84&type=T

=========================================================
<16강> REST방식으로 전환

REST(Representational State Transfer) : 자원의 표현에 의한 상태 전달
자원 : 해당 소프트웨어가 관리하는 모든 것
EX) 문서, 그림, 데이터, 해당 소프트웨어 자체 등

자원의 표현 : 그 자원을 표현하기 위한 이름
EX) DB의 학생 정보가 자원일 때, 'Student'를 자원의 표현으로 정한다.

상태(정보)전달
데이터가 요청되어지는 시점에서 자원의 상태(정보)를 전달한다.
JSON 혹은  XML을 통해 데이터를 주고 받는 것이 일반적이다.

http://localhost:8081/board/list?pageNum=1&amount=10

GET / POST / PUT / DELETE 등등...............


@RestController
- 라이브러리 빌드
- jackson-databind
- jackson-dataformat-xml

@RestController의 데이터 반환형식
1. 문자열 반환 (produces = "text/plain; charset=UTF-8")
- http://localhost:8081/sample/getText
2. 객체 반환 (produces = {MediaType.APPLICATION_JSON_UTF8_VALUE,
			MediaType.APPLICATION_XML_VALUE))
- http://localhost:8081/sample/getSample          => XML
- http://localhost:8081/sample/getSample.json    => JSON
- http://localhost:8081/sample/getList.json         => JSON


http://localhost:8081/member/join.jsp
http://localhost:8081/member/join.json

http://localhost:8081/sample/


3.컬렉션 타입 반환
- Stream Class
- 중간연산, 최종연산
- IntStream.range(1,10).mapToObj(i -> new SampleVO(i, i + "First", i + "Last"))
		.collect(Collectors.toList());
		| |				

SampleVO sm1 = new SampleVO(1, "1 Frst", "1 Last");
SampleVO sm2 = new SampleVO(1, "1 Frst", "1 Last");
SampleVO sm3 = new SampleVO(1, "1 Frst", "1 Last");
SampleVO sm10 = new SampleVO(10, "10 Frst", "10 Last");

ArrayList<SampleVO> list = new ArrayList<>();

4.ResponseEntity 객체를 사용한 값 반환
- ResponseEntity.status(HttpStatus.BAD_GATEWAY).body(vo); 
- http://localhost:8081/sample/check.json?height=150&weight=60

5. @RestController에서 파라미터
- @PathVariable (@PathVariable("cat") String cat)
                                     sno        pno
- http://localhost:8081/sample/{100}/page/{3}.json
- http://localhost:8081/sample/product/bags/1234.json

6. @RequestBody ( @RequestBody Ticket ticket )
- 전달된 데이터의 형 변환

http://localhost:8081/board/list
=========================================================
<17강> ajax 댓글 처리

테이블 설계 시 (데이터베이스)

부모와 자식
    1 : n 관계 (제일 이상적)
식별(게시판 댓글)
비식별(사원정보)

ajax 처리 방식 사용 이유 :  비동기 처리방식을 위해
                                   - 새로고침 하지 않는 방식

[Spring] consumes와 produces의 차이

consumes는 들어오는 데이터 타입을 정의할 때 사용한다.
consumes = MediaType.APPLICATION_JSON_VALUE

produces는 반환 하는 데이터 타입을 정의한다.
produces = MediaType.APPLICATION_JSON_VALUE


http://localhost:8081/replies/new
{"bno":456768,"reply":"Hello Reply","replyer":"user00"}
desktop agent 다운로드 받으면 전송됨

                                 /pages/{bno}/{page}
http://localhost:8081/replies/pages/458768/1.json

댓글 조회
http://localhost:8081/replies/12.json
댓글 삭제
postman 접속하여 DELETE전송방식으로 삭제
댓글 수정
postman 접속하여 PUT전송방식으로 수정

$.ajax()
$.getJSON()
$.get()
$.post()


데이터 속성

HTML5부터는 데이터 속성이라는 개념이 생겼습니다.
데이터 속성은 'data-'로 시작해야 하며, 브라우저는 이러한 데이터 속성에는 어떠한 행동도
관여하지 않기 때문에 개발자는 요소에 특정한 데이터를 저장하고 싶은 경우 자유롭게 사용할 수 있습니다.
HTML 표준 속성인 value 속성과는 상관이 없습니다.

<input type="text" data-value="001" id = "username">

AOP 용어

타겟(Target)
- 핵심 기능을 담고 있는 모듈로 타겟은 부가기능을 부여할 대상이 된다.

어드바이스(Advice)

- 어드바이스는 타겟에 제공할 부가기능을 담고 있는 모듈이다.

Joinpoint

- Advice를 적용가능한 지점을 의미합니다.

Pointcut ( ex..모델들 중 최상 모델 )

- Joinpoint의 부분 집합으로, Advice가 적용되는 Joinpoint를 나타냅니다.

Advice ( ex..언제 Pointcut을 적용할지 )

- Aspect를 언제 핵심 코드에 적용할 지를 정의합니다.

Weaving

- Advice를 핵심 코드에 적용하는 것을 말합니다.

Aspect

- 여러 객체에 공통으로 적용되는 기능을 말합니다. (공통 기능)

=========================================================
<21강> 파일 업로드 처리

web.xml 상단 수정

<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xmlns="http://xmlns.jcp.org/xml/ns/javaee"
   xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
   id="WebApp_ID" version="3.1">

web.xml 추가

<!-- Processes application requests -->
	<servlet>
<multipart-config>
<location>C:\\upload\\temp</location>
<max-file-size>20971520</max-file-size> <!-- 1MB * 20 -->
<max-request-size>41943040</max-request-size> <!-- 40MB -->
<file-size-threshold>20971520</file-size-threshold> <!-- 20MB -->
</multipart-config>
	<servlet>

servlet-context.xml 추가

<beans:bean id="multipartResolver" class="org.springframework.web.multipart.support.StandardServletMultipartResolver">
   </beans:bean>


http://localhost:8081/uploadForm


processData : 
  - 일반적으로 서버에 전달되는 데이터는 query string 형태이다.
  - ex : http://example.com?title=tit&content=cont
  - data 파라미터로 전달된 데이터를 jQuery 내부적으로 query string 형태로 만드는 데, 
    파일 전송의 경우 이를 하지 않아야하므로 processData를 false로 설정

contentType : 
  - default 값은 "application/x-www-form-urlencoded; charset=UTF-8", "multipart/form-data"로 전송되도록 false 설정.
  - 명시적으로 "multipart/form-data"으로 설정해주면 boundary string이 안 들어가 제대로 동작하지 않는다.
  - boundary string : 브라우저에서 넣어주는 전송되는 데이터 영역을 구분해주는 구분자

@RequestBody
서버에 JSON 형식의 requestBody로 요청 데이터를 전송했을 때, Java에서는 해당 JSON 형식의 데이터를 받기 위해서 
JSON -> Java Object로의 변환이 필요합니다.

@ResponseBody
서버에서 클라이언트로 다시 응답 데이터 responseBody를 보낼 때도 Java Object에서 JSON 또는 XML 같은 형식으로의 변환이 필요합니다. 
이러한 과정을 해당 어노테이션들이 처리해주는 것입니다.

[ { }, { } ]


http://localhost:8081/uploadAjax
섬네일 이미지 보여주기
http://localhost:8081/display?fileName=2023/01/06/AOP.png
첨부파일의 다운로드 코드
http://localhost:8081/download?fileName=test1.png


http://localhost:8081/board/register

http://localhost:8081/board/list

































